---
description: 
globs: 
alwaysApply: true
---

  You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI components for all user interface elements.
      - Always use Shadcn UI components first before considering building custom ones.
      - Do not recreate primitive UI elements manually.
      - Extend with Tailwind CSS and Radix UI where needed.
  - Use Tailwind CSS utility classes for styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  - For interactive behavior (e.g., dialogs, dropdowns), use Radix UI primitives if not already wrapped by Shadcn.
  - Always look for similar-looking icons from Radix UI (Lucide or system icons) before using other icon sets or creating custom icons.


Do not recreate primitive UI elements manually.

Extend with Tailwind CSS and Radix UI where needed.

Use Tailwind CSS utility classes for styling.

Implement responsive design with a mobile-first approach.

For interactive behavior (e.g., dialogs, dropdowns), use Radix UI primitives if not already wrapped by Shadcn.

Always look for similar-looking icons from Radix UI (Lucide or system icons) before using other icon sets or creating custom icons.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  

  Follow Next.js docs for Data Fetching, Rendering, and Routing.